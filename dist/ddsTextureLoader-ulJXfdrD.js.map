{"version":3,"file":"ddsTextureLoader-ulJXfdrD.js","sources":["../node_modules/@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader.js"],"sourcesContent":["import { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial.js\";\nimport { DDSTools } from \"../../../Misc/dds.js\";\n/**\n * Implementation of the DDS Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _DDSTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = true;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param imgs contains the cube maps\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(imgs, texture, createPolynomials, onLoad) {\n        const engine = texture.getEngine();\n        let info;\n        let loadMipmap = false;\n        let maxLevel = 1000;\n        if (Array.isArray(imgs)) {\n            for (let index = 0; index < imgs.length; index++) {\n                const data = imgs[index];\n                info = DDSTools.GetDDSInfo(data);\n                texture.width = info.width;\n                texture.height = info.height;\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n                engine._unpackFlipY(info.isCompressed);\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\n                if (!info.isFourCC && info.mipmapCount === 1) {\n                    engine.generateMipMapsForCubemap(texture);\n                }\n                else {\n                    maxLevel = info.mipmapCount - 1;\n                }\n            }\n        }\n        else {\n            const data = imgs;\n            info = DDSTools.GetDDSInfo(data);\n            texture.width = info.width;\n            texture.height = info.height;\n            if (createPolynomials) {\n                info.sphericalPolynomial = new SphericalPolynomial();\n            }\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n            engine._unpackFlipY(info.isCompressed);\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n            if (!info.isFourCC && info.mipmapCount === 1) {\n                // Do not unbind as we still need to set the parameters.\n                engine.generateMipMapsForCubemap(texture, false);\n            }\n            else {\n                maxLevel = info.mipmapCount - 1;\n            }\n        }\n        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const info = DDSTools.GetDDSInfo(data);\n        const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && Math.max(info.width, info.height) >> (info.mipmapCount - 1) === 1;\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n        });\n    }\n}\n//# sourceMappingURL=ddsTextureLoader.js.map"],"names":["_DDSTextureLoader","imgs","texture","createPolynomials","onLoad","engine","info","loadMipmap","maxLevel","index","data","DDSTools","SphericalPolynomial","callback"],"mappings":";AAOO,MAAMA,EAAkB;AAAA,EAC3B,cAAc;AAIV,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAaC,GAAMC,GAASC,GAAmBC,GAAQ;AACnD,UAAMC,IAASH,EAAQ,UAAS;AAChC,QAAII,GACAC,IAAa,IACbC,IAAW;AACf,QAAI,MAAM,QAAQP,CAAI;AAClB,eAASQ,IAAQ,GAAGA,IAAQR,EAAK,QAAQQ,KAAS;AAC9C,cAAMC,IAAOT,EAAKQ,CAAK;AACvB,QAAAH,IAAOK,EAAS,WAAWD,CAAI,GAC/BR,EAAQ,QAAQI,EAAK,OACrBJ,EAAQ,SAASI,EAAK,QACtBC,KAAcD,EAAK,SAASA,EAAK,eAAeA,EAAK,cAAc,MAAMJ,EAAQ,iBACjFG,EAAO,aAAaC,EAAK,YAAY,GACrCK,EAAS,gBAAgBN,GAAQH,GAASQ,GAAMJ,GAAMC,GAAY,GAAG,IAAIE,CAAK,GAC1E,CAACH,EAAK,YAAYA,EAAK,gBAAgB,IACvCD,EAAO,0BAA0BH,CAAO,IAGxCM,IAAWF,EAAK,cAAc;AAAA,MAEtC;AAAA,SAEC;AACD,YAAMI,IAAOT;AACb,MAAAK,IAAOK,EAAS,WAAWD,CAAI,GAC/BR,EAAQ,QAAQI,EAAK,OACrBJ,EAAQ,SAASI,EAAK,QAClBH,MACAG,EAAK,sBAAsB,IAAIM,EAAmB,IAEtDL,KAAcD,EAAK,SAASA,EAAK,eAAeA,EAAK,cAAc,MAAMJ,EAAQ,iBACjFG,EAAO,aAAaC,EAAK,YAAY,GACrCK,EAAS,gBAAgBN,GAAQH,GAASQ,GAAMJ,GAAMC,GAAY,CAAC,GAC/D,CAACD,EAAK,YAAYA,EAAK,gBAAgB,IAEvCD,EAAO,0BAA0BH,GAAS,EAAK,IAG/CM,IAAWF,EAAK,cAAc;AAAA,IAEtC;AACA,IAAAD,EAAO,yBAAyBH,GAASK,GAAYC,CAAQ,GAC7DN,EAAQ,UAAU,IAClBA,EAAQ,mBAAmB,gBAAgBA,CAAO,GAClDA,EAAQ,mBAAmB,MAAK,GAC5BE,KACAA,EAAO,EAAE,OAAO,IAAM,OAAOF,EAAQ,OAAO,MAAAI,GAAM,MAAML,GAAM,SAAAC,EAAO,CAAE;AAAA,EAE/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAASQ,GAAMR,GAASW,GAAU;AAC9B,UAAMP,IAAOK,EAAS,WAAWD,CAAI,GAC/BH,KAAcD,EAAK,SAASA,EAAK,eAAeA,EAAK,cAAc,MAAMJ,EAAQ,mBAAmB,KAAK,IAAII,EAAK,OAAOA,EAAK,MAAM,KAAMA,EAAK,cAAc,MAAO;AAC1K,IAAAO,EAASP,EAAK,OAAOA,EAAK,QAAQC,GAAYD,EAAK,UAAU,MAAM;AAC/D,MAAAK,EAAS,gBAAgBT,EAAQ,UAAS,GAAIA,GAASQ,GAAMJ,GAAMC,GAAY,CAAC;AAAA,IACpF,CAAC;AAAA,EACL;AACJ;","x_google_ignoreList":[0]}