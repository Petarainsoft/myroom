{"version":3,"file":"ktxTextureLoader-BefhF0ZC.js","sources":["../node_modules/@babylonjs/core/Materials/Textures/Loaders/ktxTextureLoader.js"],"sourcesContent":["import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer.js\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2.js\";\nimport { Logger } from \"../../../Misc/logger.js\";\n\nfunction mapSRGBToLinear(format) {\n    switch (format) {\n        case 35916:\n            return 33776;\n        case 35918:\n            return 33778;\n        case 35919:\n            return 33779;\n        case 37493:\n            return 37492;\n        case 37497:\n            return 37496;\n        case 37495:\n            return 37494;\n        case 37840:\n            return 37808;\n        case 36493:\n            return 36492;\n    }\n    return null;\n}\n/**\n * Implementation of the KTX Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _KTXTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n        texture._invertVScale = !texture.invertY;\n        const engine = texture.getEngine();\n        const ktx = new KhronosTextureContainer(data, 6);\n        const loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n        engine._unpackFlipY(true);\n        ktx.uploadLevels(texture, texture.generateMipMaps);\n        texture.width = ktx.pixelWidth;\n        texture.height = ktx.pixelHeight;\n        engine._setCubeMapTextureParams(texture, loadMipmap, ktx.numberOfMipmapLevels - 1);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad();\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     * @param options\n     */\n    loadData(data, texture, callback, options) {\n        if (KhronosTextureContainer.IsValid(data)) {\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n            texture._invertVScale = !texture.invertY;\n            const ktx = new KhronosTextureContainer(data, 1);\n            const mappedFormat = mapSRGBToLinear(ktx.glInternalFormat);\n            if (mappedFormat) {\n                texture.format = mappedFormat;\n                texture._useSRGBBuffer = texture.getEngine()._getUseSRGBBuffer(true, texture.generateMipMaps);\n                texture._gammaSpace = true;\n            }\n            else {\n                texture.format = ktx.glInternalFormat;\n            }\n            callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\n                ktx.uploadLevels(texture, texture.generateMipMaps);\n            }, ktx.isInvalid);\n        }\n        else if (KhronosTextureContainer2.IsValid(data)) {\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\n            ktx2._uploadAsync(data, texture, options).then(() => {\n                callback(texture.width, texture.height, texture.generateMipMaps, true, () => { }, false);\n            }, (error) => {\n                Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\n                callback(0, 0, false, false, () => { }, true);\n            });\n        }\n        else {\n            Logger.Error(\"texture missing KTX identifier\");\n            callback(0, 0, false, false, () => { }, true);\n        }\n    }\n}\n//# sourceMappingURL=ktxTextureLoader.js.map"],"names":["mapSRGBToLinear","format","_KTXTextureLoader","data","texture","createPolynomials","onLoad","engine","ktx","KhronosTextureContainer","loadMipmap","callback","options","mappedFormat","KhronosTextureContainer2","error","Logger"],"mappings":";AAIA,SAASA,EAAgBC,GAAQ;AAC7B,UAAQA,GAAM;AAAA,IACV,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,EACnB;AACI,SAAO;AACX;AAMO,MAAMC,EAAkB;AAAA,EAC3B,cAAc;AAIV,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAaC,GAAMC,GAASC,GAAmBC,GAAQ;AACnD,QAAI,MAAM,QAAQH,CAAI;AAClB;AAGJ,IAAAC,EAAQ,gBAAgB,CAACA,EAAQ;AACjC,UAAMG,IAASH,EAAQ,UAAS,GAC1BI,IAAM,IAAIC,EAAwBN,GAAM,CAAC,GACzCO,IAAaF,EAAI,uBAAuB,KAAKJ,EAAQ;AAC3D,IAAAG,EAAO,aAAa,EAAI,GACxBC,EAAI,aAAaJ,GAASA,EAAQ,eAAe,GACjDA,EAAQ,QAAQI,EAAI,YACpBJ,EAAQ,SAASI,EAAI,aACrBD,EAAO,yBAAyBH,GAASM,GAAYF,EAAI,uBAAuB,CAAC,GACjFJ,EAAQ,UAAU,IAClBA,EAAQ,mBAAmB,gBAAgBA,CAAO,GAClDA,EAAQ,mBAAmB,MAAK,GAC5BE,KACAA,EAAM;AAAA,EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAASH,GAAMC,GAASO,GAAUC,GAAS;AACvC,QAAIH,EAAwB,QAAQN,CAAI,GAAG;AAEvC,MAAAC,EAAQ,gBAAgB,CAACA,EAAQ;AACjC,YAAMI,IAAM,IAAIC,EAAwBN,GAAM,CAAC,GACzCU,IAAeb,EAAgBQ,EAAI,gBAAgB;AACzD,MAAIK,KACAT,EAAQ,SAASS,GACjBT,EAAQ,iBAAiBA,EAAQ,UAAS,EAAG,kBAAkB,IAAMA,EAAQ,eAAe,GAC5FA,EAAQ,cAAc,MAGtBA,EAAQ,SAASI,EAAI,kBAEzBG,EAASH,EAAI,YAAYA,EAAI,aAAaJ,EAAQ,iBAAiB,IAAM,MAAM;AAC3E,QAAAI,EAAI,aAAaJ,GAASA,EAAQ,eAAe;AAAA,MACrD,GAAGI,EAAI,SAAS;AAAA,IACpB,MACK,CAAIM,EAAyB,QAAQX,CAAI,IAC7B,IAAIW,EAAyBV,EAAQ,UAAS,CAAE,EACxD,aAAaD,GAAMC,GAASQ,CAAO,EAAE,KAAK,MAAM;AACjD,MAAAD,EAASP,EAAQ,OAAOA,EAAQ,QAAQA,EAAQ,iBAAiB,IAAM,MAAM;AAAA,MAAE,GAAG,EAAK;AAAA,IAC3F,GAAG,CAACW,MAAU;AACV,MAAAC,EAAO,KAAK,qCAAqCD,EAAM,OAAO,EAAE,GAChEJ,EAAS,GAAG,GAAG,IAAO,IAAO,MAAM;AAAA,MAAE,GAAG,EAAI;AAAA,IAChD,CAAC,KAGDK,EAAO,MAAM,gCAAgC,GAC7CL,EAAS,GAAG,GAAG,IAAO,IAAO,MAAM;AAAA,IAAE,GAAG,EAAI;AAAA,EAEpD;AACJ;","x_google_ignoreList":[0]}