{"version":3,"file":"envTextureLoader-CcAWNMLM.js","sources":["../node_modules/@babylonjs/core/Materials/Textures/Loaders/envTextureLoader.js"],"sourcesContent":["import { GetEnvInfo, UploadEnvLevelsAsync, UploadEnvSpherical } from \"../../../Misc/environmentTextureTools.js\";\n/**\n * Implementation of the ENV Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _ENVTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        const info = GetEnvInfo(data);\n        if (info) {\n            texture.width = info.width;\n            texture.height = info.width;\n            try {\n                UploadEnvSpherical(texture, info);\n                UploadEnvLevelsAsync(texture, data, info).then(() => {\n                    texture.isReady = true;\n                    texture.onLoadedObservable.notifyObservers(texture);\n                    texture.onLoadedObservable.clear();\n                    if (onLoad) {\n                        onLoad();\n                    }\n                }, (reason) => {\n                    onError?.(\"Can not upload environment levels\", reason);\n                });\n            }\n            catch (e) {\n                onError?.(\"Can not upload environment file\", e);\n            }\n        }\n        else if (onError) {\n            onError(\"Can not parse the environment file\", null);\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     */\n    loadData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".env not supported in 2d.\";\n    }\n}\n//# sourceMappingURL=envTextureLoader.js.map"],"names":["_ENVTextureLoader","data","texture","createPolynomials","onLoad","onError","info","GetEnvInfo","UploadEnvSpherical","UploadEnvLevelsAsync","reason","e"],"mappings":";AAMO,MAAMA,EAAkB;AAAA,EAC3B,cAAc;AAIV,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAaC,GAAMC,GAASC,GAAmBC,GAAQC,GAAS;AAC5D,QAAI,MAAM,QAAQJ,CAAI;AAClB;AAEJ,UAAMK,IAAOC,EAAWN,CAAI;AAC5B,QAAIK,GAAM;AACN,MAAAJ,EAAQ,QAAQI,EAAK,OACrBJ,EAAQ,SAASI,EAAK;AACtB,UAAI;AACA,QAAAE,EAAmBN,GAASI,CAAI,GAChCG,EAAqBP,GAASD,GAAMK,CAAI,EAAE,KAAK,MAAM;AACjD,UAAAJ,EAAQ,UAAU,IAClBA,EAAQ,mBAAmB,gBAAgBA,CAAO,GAClDA,EAAQ,mBAAmB,MAAK,GAC5BE,KACAA,EAAM;AAAA,QAEd,GAAG,CAACM,MAAW;AACX,UAAAL,KAAA,QAAAA,EAAU,qCAAqCK;AAAA,QACnD,CAAC;AAAA,MACL,SACOC,GAAG;AACN,QAAAN,KAAA,QAAAA,EAAU,mCAAmCM;AAAA,MACjD;AAAA,IACJ,MACK,CAAIN,KACLA,EAAQ,sCAAsC,IAAI;AAAA,EAE1D;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW;AAEP,UAAM;AAAA,EACV;AACJ;","x_google_ignoreList":[0]}