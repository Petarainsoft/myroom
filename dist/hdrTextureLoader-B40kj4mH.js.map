{"version":3,"file":"hdrTextureLoader-B40kj4mH.js","sources":["../node_modules/@babylonjs/core/Materials/Textures/Loaders/hdrTextureLoader.js"],"sourcesContent":["import { RGBE_ReadHeader, RGBE_ReadPixels } from \"../../../Misc/HighDynamicRange/hdr.js\";\n\n/**\n * Implementation of the HDR Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _HDRTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * Cube texture are not supported by .hdr files\n     */\n    loadCubeData() {\n        // eslint-disable-next-line no-throw-literal\n        throw \".hdr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        const hdrInfo = RGBE_ReadHeader(uint8array);\n        const pixelsDataRGB32 = RGBE_ReadPixels(uint8array, hdrInfo);\n        const pixels = hdrInfo.width * hdrInfo.height;\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\n        for (let i = 0; i < pixels; i += 1) {\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n            pixelsDataRGBA32[i * 4 + 3] = 1;\n        }\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\n            const engine = texture.getEngine();\n            texture.type = 1;\n            texture.format = 5;\n            texture._gammaSpace = false;\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n        });\n    }\n}\n//# sourceMappingURL=hdrTextureLoader.js.map"],"names":["_HDRTextureLoader","data","texture","callback","uint8array","hdrInfo","RGBE_ReadHeader","pixelsDataRGB32","RGBE_ReadPixels","pixels","pixelsDataRGBA32","i","engine"],"mappings":";AAOO,MAAMA,EAAkB;AAAA,EAC3B,cAAc;AAIV,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AAEX,UAAM;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAASC,GAAMC,GAASC,GAAU;AAC9B,UAAMC,IAAa,IAAI,WAAWH,EAAK,QAAQA,EAAK,YAAYA,EAAK,UAAU,GACzEI,IAAUC,EAAgBF,CAAU,GACpCG,IAAkBC,EAAgBJ,GAAYC,CAAO,GACrDI,IAASJ,EAAQ,QAAQA,EAAQ,QACjCK,IAAmB,IAAI,aAAaD,IAAS,CAAC;AACpD,aAASE,IAAI,GAAGA,IAAIF,GAAQE,KAAK;AAC7B,MAAAD,EAAiBC,IAAI,CAAC,IAAIJ,EAAgBI,IAAI,CAAC,GAC/CD,EAAiBC,IAAI,IAAI,CAAC,IAAIJ,EAAgBI,IAAI,IAAI,CAAC,GACvDD,EAAiBC,IAAI,IAAI,CAAC,IAAIJ,EAAgBI,IAAI,IAAI,CAAC,GACvDD,EAAiBC,IAAI,IAAI,CAAC,IAAI;AAElC,IAAAR,EAASE,EAAQ,OAAOA,EAAQ,QAAQH,EAAQ,iBAAiB,IAAO,MAAM;AAC1E,YAAMU,IAASV,EAAQ,UAAS;AAChC,MAAAA,EAAQ,OAAO,GACfA,EAAQ,SAAS,GACjBA,EAAQ,cAAc,IACtBU,EAAO,6BAA6BV,GAASQ,CAAgB;AAAA,IACjE,CAAC;AAAA,EACL;AACJ;","x_google_ignoreList":[0]}